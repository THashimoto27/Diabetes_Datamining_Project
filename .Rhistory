.data/PoPCites_Pubmed.csv
pubmed = read.csv(".data/PoPCites_Pubmed.csv", header=T)
pubmed = read.csv("./data/PoPCites_Pubmed.csv", header=T)
View(pubmed)
data_pubmed = data.frame(pubmed$Abstract)
View(data_pubmed)
library(tokenizers)
install.packages("tokenizers")
install.packages("stopwords")
data_pubmed[1]
View(data_pubmed)
View(pubmed)
data_pubmed[1,1]
tokenize_words(data_pubmed[1,1], stopwords = stopwords::stopwords("en"))
library(tokenizers)
library(stopwords)
test = tokenize_words(data_pubmed[1,1], stopwords = stopwords::stopwords("en"))
View(test)
test = as.data.frame(tokenize_words(data_pubmed[1,1], stopwords = stopwords::stopwords("en")))
View(test)
token = tokenize_words(data_pubmed, stopwords = stopwords::stopwords("en"))
token = tokenize_words(data_pubmed, stopwords = stopwords::stopwords("en"))
token = data.frame()
for (i in 1:2){
token[i] = tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
View(token)
token = data.frame()
for (i in 1:2){
token[i,1] = tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
View(token)
token = data.frame()
token = data.frame()
for (i in 1:2){
token= tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
View(token)
for (i in 1:2){
token[i]= tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
View(token)
token$1
token[1]
nrow(data_pubmed)
library(magrittr)
library(dplyr)
library(tidyverse)
library(sjmisc)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)
library(lubridate)
library(olsrr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(gamlr)
library(arules)
library(knitr)
library(tokenizers)
library(stopwords)
library(arulesViz)
load("./data/diabetes.RData")
pubmed = read.csv("./data/PoPCites_Pubmed.csv", header=T)
# Drop blank row 1000rows -> 950 rows
data_pubmed = data.frame(pubmed$Abstract[!pubmed$Abstract==""])
token = list()
for (i in 1:nrow(data_pubmed)){
token[i]= tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
## Remove duplicates ("de-dupe")
token_d = lapply(token, unique)
## Cast this variable as a special arules "transactions" class.
token_trans = as(token_d, "transactions")
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.01, maxlen=4))
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.01, maxlen=1))
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.01))
plot(token_rules, method='two-key plot')
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.03))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.03, confidence=.03))
plot(token_rules, method='two-key plot',jitter = 0)
## Cast this variable as a special arules "transactions" class.
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.05))
plot(token_rules, method='two-key plot',jitter = 0)
## Cast this variable as a special arules "transactions" class.
token_rules = apriori(token_trans,
parameter=list(support=.1, confidence=.05))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.15, confidence=.05))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.01, confidence=.05))
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.01))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.005))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.0001))
plot(token_rules, method='two-key plot',jitter = 0)
## Cast this variable as a special arules "transactions" class.
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.01, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.03, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.02, confidence=.001))
png("./fig/plot_token.png")
plot(token_rules, method='two-key plot',jitter = 0)
dev.off()
groc_graph = associations2igraph(subset(rules, lift>2), associationsAsNodes = FALSE)
groc_graph = associations2igraph(subset(rules, lift>2), associationsAsNodes = FALSE)
token_graph = associations2igraph(subset(token_rules, lift>2), associationsAsNodes = FALSE)
igraph::write_graph(token_graph, file='./fig/token_graph.graphml', format = "graphml")
token_rules = apriori(token_trans,
parameter=list(support=.08, confidence=.001))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.1, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.02, confidence=.001))
token_graph = associations2igraph(subset(token_rules, lift>4), associationsAsNodes = FALSE)
igraph::write_graph(token_graph, file='./fig/token_graph2.graphml', format = "graphml")
plot(token_rules, method='two-key plot',jitter = 0)
png("./fig/plot_token.png")
plot(token_rules, method='two-key plot',jitter = 0)
dev.off()
library(lubridate)
library(randomForest)
library(gbm)
library(pdp)
library(modelr)
library(rsample)
library(rpart)
library(rpart.plot)
library(caret)
library(textir)
library(corrplot)
library(gridExtra)
library(GGally)
library(e1071)
library(ggthemes)
library(scales)
library(class)
library(ggmap)
library(caret)
library(purrr)
library(modelsummary)
library (ClusterR)
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
diabetediabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000]
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000]
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000]
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000,:]
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000,]
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
boost_cv = map(diabetes_folds$train,~gbm(Diabetes_binary ~.,
data = ., interaction.depth=4, n.trees=500, shrinkage=.05))
forest_cv = map(diabetes_folds$train,~randomForest(Diabetes_binary ~.,data=.))
rmse_cart_cv = mean(map2_dbl(cart_cv, diabetes_folds$test, modelr::rmse))
rmse_forest_cv = mean(map2_dbl(forest_cv, diabetes_folds$test, modelr::rmse))# could not do it as it takes too much time
rmse_boost_cv = mean(map2_dbl(boost_cv, diabetes_folds$test, modelr::rmse))
rmse_cart_cv
rmse_boost_cv
rmse_forest_cv
diabetes <- diabetes[1:2000,]
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
boost_cv = map(diabetes_folds$train,~gbm(Diabetes_binary ~.,
data = ., interaction.depth=4, n.trees=500, shrinkage=.05))
forest_cv = map(diabetes_folds$train,~randomForest(Diabetes_binary ~.,data=.))
rmse_cart_cv
rmse_boost_cv
rmse_forest_cv
diabetes <- diabetes[1:2000,]
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
View(diabetes)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
View(cart_cv)
rmse_cart_cv
diabetes <- diabetes[1:1000,]
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
rmse_cart_cv = mean(map2_dbl(cart_cv, diabetes_folds$test, modelr::rmse))
diabetes <- diabetes[1:100,]
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., dat
diabetes <- diabetes[1:100,]
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
View(cart_cv)
