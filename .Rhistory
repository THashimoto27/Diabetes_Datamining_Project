.data/PoPCites_Pubmed.csv
pubmed = read.csv(".data/PoPCites_Pubmed.csv", header=T)
pubmed = read.csv("./data/PoPCites_Pubmed.csv", header=T)
View(pubmed)
data_pubmed = data.frame(pubmed$Abstract)
View(data_pubmed)
library(tokenizers)
install.packages("tokenizers")
install.packages("stopwords")
data_pubmed[1]
View(data_pubmed)
View(pubmed)
data_pubmed[1,1]
tokenize_words(data_pubmed[1,1], stopwords = stopwords::stopwords("en"))
library(tokenizers)
library(stopwords)
test = tokenize_words(data_pubmed[1,1], stopwords = stopwords::stopwords("en"))
View(test)
test = as.data.frame(tokenize_words(data_pubmed[1,1], stopwords = stopwords::stopwords("en")))
View(test)
token = tokenize_words(data_pubmed, stopwords = stopwords::stopwords("en"))
token = tokenize_words(data_pubmed, stopwords = stopwords::stopwords("en"))
token = data.frame()
for (i in 1:2){
token[i] = tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
View(token)
token = data.frame()
for (i in 1:2){
token[i,1] = tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
View(token)
token = data.frame()
token = data.frame()
for (i in 1:2){
token= tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
View(token)
for (i in 1:2){
token[i]= tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
View(token)
token$1
token[1]
nrow(data_pubmed)
library(magrittr)
library(dplyr)
library(tidyverse)
library(sjmisc)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)
library(lubridate)
library(olsrr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(gamlr)
library(arules)
library(knitr)
library(tokenizers)
library(stopwords)
library(arulesViz)
load("./data/diabetes.RData")
pubmed = read.csv("./data/PoPCites_Pubmed.csv", header=T)
# Drop blank row 1000rows -> 950 rows
data_pubmed = data.frame(pubmed$Abstract[!pubmed$Abstract==""])
token = list()
for (i in 1:nrow(data_pubmed)){
token[i]= tokenize_words(data_pubmed[i,1], stopwords = stopwords::stopwords("en"))
}
## Remove duplicates ("de-dupe")
token_d = lapply(token, unique)
## Cast this variable as a special arules "transactions" class.
token_trans = as(token_d, "transactions")
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.01, maxlen=4))
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.01, maxlen=1))
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.01))
plot(token_rules, method='two-key plot')
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.03))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.03, confidence=.03))
plot(token_rules, method='two-key plot',jitter = 0)
## Cast this variable as a special arules "transactions" class.
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.05))
plot(token_rules, method='two-key plot',jitter = 0)
## Cast this variable as a special arules "transactions" class.
token_rules = apriori(token_trans,
parameter=list(support=.1, confidence=.05))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.15, confidence=.05))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.01, confidence=.05))
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.01))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.005))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.0001))
plot(token_rules, method='two-key plot',jitter = 0)
## Cast this variable as a special arules "transactions" class.
token_rules = apriori(token_trans,
parameter=list(support=.05, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.01, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.03, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.02, confidence=.001))
png("./fig/plot_token.png")
plot(token_rules, method='two-key plot',jitter = 0)
dev.off()
groc_graph = associations2igraph(subset(rules, lift>2), associationsAsNodes = FALSE)
groc_graph = associations2igraph(subset(rules, lift>2), associationsAsNodes = FALSE)
token_graph = associations2igraph(subset(token_rules, lift>2), associationsAsNodes = FALSE)
igraph::write_graph(token_graph, file='./fig/token_graph.graphml', format = "graphml")
token_rules = apriori(token_trans,
parameter=list(support=.08, confidence=.001))
plot(token_rules, method='two-key plot',jitter = 0)
token_rules = apriori(token_trans,
parameter=list(support=.1, confidence=.001))
token_rules = apriori(token_trans,
parameter=list(support=.02, confidence=.001))
token_graph = associations2igraph(subset(token_rules, lift>4), associationsAsNodes = FALSE)
igraph::write_graph(token_graph, file='./fig/token_graph2.graphml', format = "graphml")
plot(token_rules, method='two-key plot',jitter = 0)
png("./fig/plot_token.png")
plot(token_rules, method='two-key plot',jitter = 0)
dev.off()
library(lubridate)
library(randomForest)
library(gbm)
library(pdp)
library(modelr)
library(rsample)
library(rpart)
library(rpart.plot)
library(caret)
library(textir)
library(corrplot)
library(gridExtra)
library(GGally)
library(e1071)
library(ggthemes)
library(scales)
library(class)
library(ggmap)
library(caret)
library(purrr)
library(modelsummary)
library (ClusterR)
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
diabetediabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000]
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000]
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000]
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000,:]
diabetes=read.csv("./data/diabetes.csv")
#We try more prdictive models: CART, BOOST & Random Forest
diabetes <- diabetes[1:1000,]
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
boost_cv = map(diabetes_folds$train,~gbm(Diabetes_binary ~.,
data = ., interaction.depth=4, n.trees=500, shrinkage=.05))
forest_cv = map(diabetes_folds$train,~randomForest(Diabetes_binary ~.,data=.))
rmse_cart_cv = mean(map2_dbl(cart_cv, diabetes_folds$test, modelr::rmse))
rmse_forest_cv = mean(map2_dbl(forest_cv, diabetes_folds$test, modelr::rmse))# could not do it as it takes too much time
rmse_boost_cv = mean(map2_dbl(boost_cv, diabetes_folds$test, modelr::rmse))
rmse_cart_cv
rmse_boost_cv
rmse_forest_cv
diabetes <- diabetes[1:2000,]
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
boost_cv = map(diabetes_folds$train,~gbm(Diabetes_binary ~.,
data = ., interaction.depth=4, n.trees=500, shrinkage=.05))
forest_cv = map(diabetes_folds$train,~randomForest(Diabetes_binary ~.,data=.))
rmse_cart_cv
rmse_boost_cv
rmse_forest_cv
diabetes <- diabetes[1:2000,]
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
View(diabetes)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
View(cart_cv)
rmse_cart_cv
diabetes <- diabetes[1:1000,]
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
rmse_cart_cv = mean(map2_dbl(cart_cv, diabetes_folds$test, modelr::rmse))
diabetes <- diabetes[1:100,]
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., dat
diabetes <- diabetes[1:100,]
K_folds = 3
diabetes_folds = crossv_kfold(diabetes, k=K_folds)
cart_cv = map(diabetes_folds$train, ~ rpart(Diabetes_binary ~., data=.))
View(cart_cv)
load("G:/マイドライブ/留学/DataMining/0409.RData")
view(p_hate_test_lm)
as.data.frame(phat_test_lm)
view(p_hate_test_lm)
summary(phat_test_lm)
coefficient(phate_test_lm)
coefficients(phat_test_lm)
summary(lm_db)
summary(logit_db)
linear_score = data.frame(phat_test_lm)
View(linear_score)
linear_score = data.frame(phat_test_lm*100)
View(linear_score)
View(linear_score)
colnames(linear_score)
colnames(linear_score) <- c("score")
View(lm_db)
View(linear_score)
linear_score = linear_score %>% mutate(score=if(score<0, 0, score))
linear_score = linear_score %>% mutate(score=ifelse(score<0, 0, score))
library(magrittr)
library(dplyr)
library(tidyverse)
library(sjmisc)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)
library(lubridate)
library(olsrr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(gamlr)
library(arules)
library(knitr)
library(tokenizers)
library(stopwords)
library(arulesViz)
load("./data/diabetes.RData")
linear_score = data.frame(phat_test_lm*100)
colnames(linear_score) <- c("score")
linear_score = linear_score %>% mutate(score=ifelse(score<0, 0, score))
View(linear_score)
logit_score = data.frame(logit_db*100)
logit_score = data.frame(phat_test_logit*100)
colnames(logit_score) <- c("score")
logit_score = logit_score %>% mutate(score=ifelse(score<0, 0, score))
ggplot(linear_score) +
geom_histogram(bins = 13, color = "white", fill = "dodgerblue")
ggplot(linear_score, x=score) +
geom_histogram(bins = 13, color = "white", fill = "dodgerblue")
rlang::last_error()
ggplot(linear_score, aes(x=score) +
geom_histogram(bins = 13, color = "white", fill = "dodgerblue")
ggplot(linear_score, aes(x=score) +
geom_histogram(bins = 13, color = "white", fill = "dodgerblue")
ggplot(linear_score, aes(x=score)) +
geom_histogram(bins = 13)
linear_score = data.frame(phat_test_lm*100)
colnames(linear_score) <- c("score")
linear_score = linear_score %>% mutate(score=ifelse(score<0, 0, score))
linear_score = linear_score %>% mutate(score=ifelse(score>100, 100, score))
ggplot(linear_score, aes(x=score)) +
geom_histogram(bins = 13)
ggplot(linear_score, aes(x=score),color = "white", fill = "dodgerblue") + geom_histogram(bins = 13)
ggplot(linear_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "dodgerblue")
ggplot(logit_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "salmon")
ggplot(linear_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "dodgerblue")
ggsave("./fig/lpm_score.png")
ggplot(logit_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "salmon")
ggsave("./fig/logit_score.png")
ggplot(linear_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "dodgerblue")+
labs(title = "Risk score by LPM", y = "Count")
ggsave("./fig/lpm_score.png")
ggplot(logit_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "salmon")+
labs(title = "Risk score by Logit", y = "Count")
ggsave("./fig/logit_score.png")
ggplot(linear_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "dodgerblue")+
labs(title = "Risk score by LPM", y = "Count")
ggplot(logit_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "salmon")+
labs(title = "Risk score by Logit", y = "Count")
save.image("G:/マイドライブ/留学/DataMining/0409.RData")
ggplot(linear_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "dodgerblue")+
labs(title = "Risk score by LPM", y = "Count")
ggplot(logit_score, aes(x=score)) + geom_histogram(bins = 13,color = "white", fill = "salmon")+
labs(title = "Risk score by Logit", y = "Count")
data_score = data.frame((linear_score,logit_score))
data_score = data.frame(c(linear_score,logit_score))
View(data_score)
colnames(logit_score) <- c("score_linear","score_logit")
View(logit_score)
data_score = data.frame(c(linear_score,logit_score))
colnames(data_score) <- c("score_linear","score_logit")
View(data_score)
ggplot(data_score)) + geom_point(aes(x=score_linea,y=score_logit))
ggplot(data_score) + geom_point(aes(x=score_linea,y=score_logit))
ggplot(data_score) + geom_point(aes(x=score_linear,y=score_logit))
+
labs(title = "Relationship of each risk scores by linear and logit")
+labs(title = "Relationship of each risk scores by linear and logit")
corr(data_score$score_linear,data_score$score_logit)
cor(data_score$score_linear,data_score$score_logit)
ggsave("./fig/relation_score.png")
load("G:/マイドライブ/留学/DataMining/0409.RData")
coef(lm_db)
library(randomForest)
library(magrittr)
library(dplyr)
library(tidyverse)
library(sjmisc)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)
library(lubridate)
library(olsrr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(gamlr)
library(arules)
library(knitr)
library(tokenizers)
library(stopwords)
library(arulesViz)
load("./data/diabetes.RData")
weight = data.frame(coef(lm_db))
View(weight)
View(weight)
rm(weight)
weight_p= data.frame(coef(lm_db))
View(weight_p)
colnames(weight_p)
weight_p= data.frame(coef(lm_db)) %>% filter(weight=ifelse(coef.lm_db.>=0,coef.lm_db,. )
)
weight_p= data.frame(coef(lm_db)) %>% filter(coef.lm_db.>=0)
View(weight_p)
View(weight_p)
View(weight_p)
weight_p$HighBP
weight= data.frame(coef(lm_db))
View(weight)
View(data_cv)
View(data_cv)
View(data_cv)
View(data_cv)
kabledata=c(HighBP=0.364689 ,HighChol= 0.364689 , CholCheck=0.364689 , BMI = 0.537938, Smoker=-0.000839,Stroke=-0.000839,HeartDiseaseorAttack= -0.000839 ,PhysActivity=-0.000839,Fruits  =-0.000839, Veggies=-0.024920,HvyAlcoholConsump= -0.151613  ,AnyHealthcare = -0.151613 ,NoDocbcCost= -0.151613 ,GenHlth = -0.151613 ,MentHlth = -0.151613  ,PhysHlth= -0.083731 ,DiffWalk= -0.083731 ,Sex  = -0.083731 ,Age=  -0.083731 ,Education = -0.083731 ,Income=  -0.083731 ) %>% round(2)
library(magrittr)
library(dplyr)
library(tidyverse)
library(sjmisc)
library(ggplot2)
library(reshape2)
library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)
library(lubridate)
library(olsrr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(gamlr)
library(arules)
library(knitr)
library(tokenizers)
library(stopwords)
library(arulesViz)
load("./data/diabetes.RData")
kable_data = as.data.frame(cbind(c(HighBP=0.365 ,HighChol=  0.293 , CholCheck= 0.211 , BMI = 0.538, Smoker=-0.000839,Stroke=0.0391,HeartDiseaseorAttack= 0.0897 ,PhysActivity= -0.0151,Fruits  = -0.0168, Veggies=-0.0249,HvyAlcoholConsump= -0.152  ,AnyHealthcare =  0.0126 ,NoDocbcCost=  0.00554 ,GenHlth =  0.651 ,MentHlth =  -0.0356  ,PhysHlth= -0.0837 ,DiffWalk=  0.0500 ,Sex  =  0.133 ,Age=   0.434 ,Education = -0.0379 ,Income=  -0.128 ), c(HighBP=7.14e-02,HighChol= 5.28e-02, CholCheck=3.46e-02, BMI = 8.71e-02, Smoker=-3.22-03,Stroke=1.67e-02,HeartDiseaseorAttack= 3.81e-02 ,PhysActivity=-3.46-03,Fruits  =-2.3e-03, Veggies= -4.15e-03,HvyAlcoholConsump=-2.91-02 ,AnyHealthcare =-3.62e-05,NoDocbcCost=-8.20e-04,GenHlth =1.14e-01,MentHlth =-6.83e-03 ,PhysHlth=-1.31e-03,DiffWalk=2.77e-02,Sex  =2.14e-02,Age= 6.12-02,Education =-7.62e-03,Income= -2.52e-02)))
View(kable_data)
rm(kable_data)
kable_data = as.data.frame(cbind(c(HighBP=7.14e-02,HighChol= 5.28e-02, CholCheck=3.46e-02, BMI = 8.71e-02, Smoker=-3.22-03,Stroke=1.67e-02,HeartDiseaseorAttack= 3.81e-02 ,PhysActivity=-3.46-03,Fruits  =-2.3e-03, Veggies= -4.15e-03,HvyAlcoholConsump=-2.91-02 ,AnyHealthcare =-3.62e-05,NoDocbcCost=-8.20e-04,GenHlth =1.14e-01,MentHlth =-6.83e-03 ,PhysHlth=-1.31e-03,DiffWalk=2.77e-02,Sex  =2.14e-02,Age= 6.12-02,Education =-7.62e-03,Income= -2.52e-02), c(HighBP=0.365 ,HighChol=  0.293 , CholCheck= 0.211 , BMI = 0.538, Smoker=-0.000839,Stroke=0.0391,HeartDiseaseorAttack= 0.0897 ,PhysActivity= -0.0151,Fruits  = -0.0168, Veggies=-0.0249,HvyAlcoholConsump= -0.152  ,AnyHealthcare =  0.0126 ,NoDocbcCost=  0.00554 ,GenHlth =  0.651 ,MentHlth =  -0.0356  ,PhysHlth= -0.0837 ,DiffWalk=  0.0500 ,Sex  =  0.133 ,Age=   0.434 ,Education = -0.0379 ,Income=  -0.128 ))
)
View(kable_data)
colnames(kable_data)= c("linear model", "logit model")
View(kable_data)
